// Generated by gencpp from file quadrotor_msgs/SimDebug.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_SIMDEBUG_H
#define QUADROTOR_MSGS_MESSAGE_SIMDEBUG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct SimDebug_
{
  typedef SimDebug_<ContainerAllocator> Type;

  SimDebug_()
    : header()
    , pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)
    , vel_x(0.0)
    , vel_y(0.0)
    , vel_z(0.0)
    , pwm_1(0.0)
    , pwm_2(0.0)
    , pwm_3(0.0)
    , pwm_4(0.0)
    , omega_x(0.0)
    , omega_y(0.0)
    , omega_z(0.0)  {
    }
  SimDebug_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)
    , vel_x(0.0)
    , vel_y(0.0)
    , vel_z(0.0)
    , pwm_1(0.0)
    , pwm_2(0.0)
    , pwm_3(0.0)
    , pwm_4(0.0)
    , omega_x(0.0)
    , omega_y(0.0)
    , omega_z(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _pos_x_type;
  _pos_x_type pos_x;

   typedef double _pos_y_type;
  _pos_y_type pos_y;

   typedef double _pos_z_type;
  _pos_z_type pos_z;

   typedef double _vel_x_type;
  _vel_x_type vel_x;

   typedef double _vel_y_type;
  _vel_y_type vel_y;

   typedef double _vel_z_type;
  _vel_z_type vel_z;

   typedef double _pwm_1_type;
  _pwm_1_type pwm_1;

   typedef double _pwm_2_type;
  _pwm_2_type pwm_2;

   typedef double _pwm_3_type;
  _pwm_3_type pwm_3;

   typedef double _pwm_4_type;
  _pwm_4_type pwm_4;

   typedef double _omega_x_type;
  _omega_x_type omega_x;

   typedef double _omega_y_type;
  _omega_y_type omega_y;

   typedef double _omega_z_type;
  _omega_z_type omega_z;





  typedef boost::shared_ptr< ::quadrotor_msgs::SimDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::SimDebug_<ContainerAllocator> const> ConstPtr;

}; // struct SimDebug_

typedef ::quadrotor_msgs::SimDebug_<std::allocator<void> > SimDebug;

typedef boost::shared_ptr< ::quadrotor_msgs::SimDebug > SimDebugPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::SimDebug const> SimDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::SimDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::SimDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::SimDebug_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::SimDebug_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pos_x == rhs.pos_x &&
    lhs.pos_y == rhs.pos_y &&
    lhs.pos_z == rhs.pos_z &&
    lhs.vel_x == rhs.vel_x &&
    lhs.vel_y == rhs.vel_y &&
    lhs.vel_z == rhs.vel_z &&
    lhs.pwm_1 == rhs.pwm_1 &&
    lhs.pwm_2 == rhs.pwm_2 &&
    lhs.pwm_3 == rhs.pwm_3 &&
    lhs.pwm_4 == rhs.pwm_4 &&
    lhs.omega_x == rhs.omega_x &&
    lhs.omega_y == rhs.omega_y &&
    lhs.omega_z == rhs.omega_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::SimDebug_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::SimDebug_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::SimDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::SimDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::SimDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::SimDebug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::SimDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::SimDebug_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::SimDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8198ed55d087e47fb2498d93f1e3409";
  }

  static const char* value(const ::quadrotor_msgs::SimDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8198ed55d087e47ULL;
  static const uint64_t static_value2 = 0xfb2498d93f1e3409ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::SimDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/SimDebug";
  }

  static const char* value(const ::quadrotor_msgs::SimDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::SimDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float64 pos_x\n"
"float64 pos_y\n"
"float64 pos_z\n"
"\n"
"float64 vel_x\n"
"float64 vel_y\n"
"float64 vel_z\n"
"\n"
"float64 pwm_1\n"
"float64 pwm_2\n"
"float64 pwm_3\n"
"float64 pwm_4\n"
"\n"
"float64 omega_x\n"
"float64 omega_y\n"
"float64 omega_z\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::quadrotor_msgs::SimDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::SimDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.pos_z);
      stream.next(m.vel_x);
      stream.next(m.vel_y);
      stream.next(m.vel_z);
      stream.next(m.pwm_1);
      stream.next(m.pwm_2);
      stream.next(m.pwm_3);
      stream.next(m.pwm_4);
      stream.next(m.omega_x);
      stream.next(m.omega_y);
      stream.next(m.omega_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::SimDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::SimDebug_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pos_x: ";
    Printer<double>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<double>::stream(s, indent + "  ", v.pos_y);
    s << indent << "pos_z: ";
    Printer<double>::stream(s, indent + "  ", v.pos_z);
    s << indent << "vel_x: ";
    Printer<double>::stream(s, indent + "  ", v.vel_x);
    s << indent << "vel_y: ";
    Printer<double>::stream(s, indent + "  ", v.vel_y);
    s << indent << "vel_z: ";
    Printer<double>::stream(s, indent + "  ", v.vel_z);
    s << indent << "pwm_1: ";
    Printer<double>::stream(s, indent + "  ", v.pwm_1);
    s << indent << "pwm_2: ";
    Printer<double>::stream(s, indent + "  ", v.pwm_2);
    s << indent << "pwm_3: ";
    Printer<double>::stream(s, indent + "  ", v.pwm_3);
    s << indent << "pwm_4: ";
    Printer<double>::stream(s, indent + "  ", v.pwm_4);
    s << indent << "omega_x: ";
    Printer<double>::stream(s, indent + "  ", v.omega_x);
    s << indent << "omega_y: ";
    Printer<double>::stream(s, indent + "  ", v.omega_y);
    s << indent << "omega_z: ";
    Printer<double>::stream(s, indent + "  ", v.omega_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_SIMDEBUG_H
